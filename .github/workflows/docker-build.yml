name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [backend, frontend]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Backend Dockerfile
      if: matrix.service == 'backend'
      run: |
        cd backend
        cat > Dockerfile << 'EOF'
        FROM python:3.11-slim

        WORKDIR /app

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            && rm -rf /var/lib/apt/lists/*

        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        # Copy application code
        COPY . .

        # Expose port
        EXPOSE 8000

        # Run the application
        CMD ["uvicorn", "server:app", "--host", "0.0.0.0", "--port", "8000"]
        EOF

    - name: Create Frontend Dockerfile
      if: matrix.service == 'frontend'
      run: |
        cd frontend
        cat > Dockerfile << 'EOF'
        # Build stage
        FROM node:20-alpine as build

        WORKDIR /app

        # Copy package files
        COPY package.json yarn.lock ./

        # Install dependencies with retry logic
        RUN yarn install --frozen-lockfile --network-timeout 100000 || \
            yarn install --frozen-lockfile --registry https://registry.npmjs.org/ || \
            npm ci

        # Copy source code
        COPY . .

        # Build the app
        RUN yarn build

        # Production stage
        FROM nginx:alpine

        # Copy built app
        COPY --from=build /app/build /usr/share/nginx/html

        # Copy nginx configuration
        COPY nginx.conf /etc/nginx/nginx.conf

        # Expose port
        EXPOSE 80

        # Start nginx
        CMD ["nginx", "-g", "daemon off;"]
        EOF

        cat > nginx.conf << 'EOF'
        events {
            worker_connections 1024;
        }

        http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;

            gzip on;
            gzip_vary on;
            gzip_min_length 10240;
            gzip_proxied expired no-cache no-store private must-revalidate auth;
            gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss;

            server {
                listen 80;
                root /usr/share/nginx/html;
                index index.html;

                location / {
                    try_files $uri $uri/ /index.html;
                }

                location /static/ {
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }
            }
        }
        EOF

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max